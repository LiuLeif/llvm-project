#+TITLE: Toy RISC-V Backend
#+AUTHOR: Wei Sun (孙伟)
#+EMAIL: wei.sun@hexintek.com
#+DATE: 2023-05-19 Fri 14:00
#+CATEGORY:
#+FILETAGS:

* Toy RISC-V Backend

** llc 识别 target

*** 目标

#+begin_example
  $> ./build/bin/llc --version
  LLVM (http://llvm.org/):
    LLVM version 15.0.0git
    DEBUG build with assertions.
    Default target: x86_64-unknown-linux-gnu
    Host CPU: skylake

    Registered Targets:
      toy - TOY
#+end_example

*** 需要的修改

1. 添加 target 到 cmake

   #+begin_example
     set(LLVM_ALL_TARGETS
     ...
     Toy
     ...
     )
   #+end_example

   这个 `Toy` 与 build 时指定的 `LLVM_TARGETS_TO_BUILD=Toy` 一致, 且 cmake 会根
   据这个名字找到 `llvm/lib/Target/Toy` 目录来编译

2. 添加 Triple::ArchType

   #+begin_src C++ :eval no
     class Triple {
       public:
         enum ArchType {
             UnknownArch,
             ...
             toy,
             ...
         };
   #+end_src

   后面提到的 LLVMInitializeToyTargetInfo 函数会使 llc 的命令行参数 `-march toy`
   会对应到 ArchType::toy, 同时 LLVMInitializeToyTargetInfo 还会注册
   ArchType::toy 对应的 TheToyTarget, 从而让 llc 找到 TheToyTarget. 后续实现的
   Toy 的其它初始化的信息都会与 TheToyTarget 关联

3. 添加 llvm/lib/Target/Toy 目录

   1) 需要实现一个名为 LLVMToyCodeGen 的库 (这个名字是由 cmake 要求的), 并实现
      LLVMInitializeToyTarget 函数, 目前实现为空

   2) 需要实现一个名为 LLVMToyDesc 的库, 实现 LLVMInitializeToyTargetMC 函数, 目
      前实现为空

   3) 需要实现一个名为 LLVMToyInfo 的库, 实现 LLVMInitializeToyTargetInfo 函数.
      为了 llc 的 `Registered Targets` 能列出 toy, 这里必须实现该函数, 以便把
      `toy`, `Triple::toy` 以及 `TheToyTarget` 关联起来

*** 测试

#+begin_example
  $> ./build/bin/llc --version
  LLVM (http://llvm.org/):
    LLVM version 15.0.0git
    DEBUG build with assertions.
    Default target: x86_64-unknown-linux-gnu
    Host CPU: skylake

    Registered Targets:
      toy - Toy RISC-V backend

  $> clang toy_test/test.c -c -emit-llvm -O0 -o /tmp/test.bc
  $> ./build/bin/llc /tmp/test.bc -march=toy

  llc: /home/sunway/source/llvm-toy/llvm/tools/llc/llc.cpp:559: auto
  compileModule(char **, llvm::LLVMContext &)::(anonymous
  class)::operator()(llvm::StringRef) const: Assertion `Target && "Could not
  allocate target machine!"' failed.
#+end_example

报错的原因是:

#+begin_src C :eval no
  /* NOTE: 由于 LLVMInitializeToyTarget 没有实现, 导致
   ,* TheTarget.TargetMachineCtorFn 没有定义, TheTarget->createTargetMachine 返回
   ,* NULL */
  Target = std::unique_ptr<TargetMachine>(TheTarget->createTargetMachine(
      TheTriple.getTriple(), CPUStr, FeaturesStr, Options, RM,
      codegen::getExplicitCodeModel(), OLvl));
  assert(Target && "Could not allocate target machine!");
#+end_src

** LLVMInitializeToyTarget

实现 LLVMInitializeToyTarget.

RegisterTargetMachine 会设置 TheTarget 的 TargetMachineCtorFn, 使得
TheTarget->createTargetMachine 返回 ToyTargetMachine 实例.

*** 测试

#+begin_example
  $> test_toy.sh
  llc: /home/sunway/source/llvm-toy/llvm/lib/CodeGen/LLVMTargetMachine.cpp:42:
  void llvm::LLVMTargetMachine::initAsmInfo(): Assertion `MRI && "Unable to create
  reg info"' failed.
#+end_example

出错的原因是没有调用 RegisterMCRegInfo, 导致 initAsmInfo 时出错.

** LLVMInitializeToyTargetMC

LLVMInitializeToyTargetMC 会设置一个回调函数, 这些回调会由 initAsm 时通过
TheTargt 的 createXXX 调用以初始化 TheTarget 的 MRI, MII, STI, AsmInfo 等.

- MRI

  MCRegisterInfo

  寄存器的编号, 名字等, 主要信息由 td 生成
  
- MII

  MCInstrInfo

  指令的编码, 名字等, 主要信息由 td 生成

- STI

  MCSubtargetInfo

  subtarget 对应调用 llc 时指定的 `-mcpu`, `-mattr` 等信息. llc 会用这些信息调用
  STI 对应的回调函数以初始化 STI.

  subtarget 的信息是由 td 生成的

- AsmInfo

  MCAsmInfo

  需要包含一些 asm 文件的格式信息, 例如 comment 对应的 `#` 符号

在定义 STI 时使用了 td 文件, td 文件需要在 cmake 中指定 tablegen 命令的参数以及
生成头文件的名字, 例如

#+begin_example
  set(LLVM_TARGET_DEFINITIONS Toy.td)
  tablegen(LLVM ToyGenSubtargetInfo.inc -gen-subtarget)
  add_public_tablegen_target(ToyCommonTableGen)
#+end_example

表示 td 的入口是 Toy.td, 使用 `-gen-subtarget` 生成 ToyGenSubtargetInfo.inc

*** 测试

#+begin_example
  ~/source/llvm-toy#toy[17:43:49]@sunway-t14> ./test_toy.sh 
  ; ModuleID = '/tmp/test.bc'
  source_filename = "toy_test/test.c"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"

  ; Function Attrs: noinline nounwind optnone uwtable
  define dso_local void @foo() #0 {
    %1 = alloca i32, align 4
    store i32 255, i32* %1, align 4
    ret void
  }

  ...
  !llvm.module.flags = !{!0}
  !llvm.ident = !{!1}

  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{!"clang version 10.0.0-4ubuntu1 "}
  llc: error: target does not support generation of this file type
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#+end_example

报错的原因是 Toy 没有指定一个 SelectionDAGISel 实例. SelectionDAGISel 是整个 isel
(instruction selection) 的入口
